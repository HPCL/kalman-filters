Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: free_batch(batch *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (free_batch(batch *)) [1] matrix_batch.c(38,34)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix_batch.c(42,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at matrix_batch.c(43,5)
      remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ matrix_batch.c(44,7) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix_batch.c(38,34):remark #34051: REGISTER ALLOCATION : [_Z10free_batchP5batch] matrix_batch.c:38

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15]
        
    Routine temporaries
        Total         :      21
            Global    :      15
            Local     :       6
        Regenerable   :       1
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [6.30e+00 ~ 2.6%]
            Writes    :       7 [6.30e+00 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: invert_matrix_2x2_batch(batch *, batch *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (invert_matrix_2x2_batch(batch *, batch *)) [2] matrix_batch.c(53,64)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix_batch.c(63,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between **A->mats[l] (65:5) and **C->mats[l] (67:5)
LOOP END

    Report from: Code generation optimizations [cg]

matrix_batch.c(53,64):remark #34051: REGISTER ALLOCATION : [_Z23invert_matrix_2x2_batchP5batchS0_] matrix_batch.c:53

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r11 r14-r15 zmm0-zmm10]
        
    Routine temporaries
        Total         :      44
            Global    :      22
            Local     :      22
        Regenerable   :       1
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: multiply_matrix_batch(batch *, batch *, batch *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (multiply_matrix_batch(batch *, batch *, batch *)) [3] matrix_batch.c(101,79)


    Report from: Code generation optimizations [cg]

matrix_batch.c(101,79):remark #34051: REGISTER ALLOCATION : [_Z21multiply_matrix_batchP5batchS0_S0_] matrix_batch.c:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r10]
        
    Routine temporaries
        Total         :      25
            Global    :       6
            Local     :      19
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: multiply_matrix_by_scalar_batch(batch *, batch *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (multiply_matrix_by_scalar_batch(batch *, batch *, double *)) [4] matrix_batch.c(115,89)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix_batch.c(128,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at matrix_batch.c(129,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at matrix_batch.c(130,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between C->mats[i][j][l] (131:9) and A->mats[i][j][l] (131:9)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at matrix_batch.c(130,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix_batch.c(115,89):remark #34051: REGISTER ALLOCATION : [_Z31multiply_matrix_by_scalar_batchP5batchS0_Pd] matrix_batch.c:115

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      42
            Global    :      24
            Local     :      18
        Regenerable   :       1
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [9.90e+00 ~ 0.7%]
            Writes    :       7 [9.90e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: add_matrix_batch(batch *, batch *, batch *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (add_matrix_batch(batch *, batch *, batch *)) [5] matrix_batch.c(138,74)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix_batch.c(151,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at matrix_batch.c(152,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at matrix_batch.c(153,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between C->mats[i][j][l] (154:9) and A->mats[i][j][l] (154:9)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at matrix_batch.c(153,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix_batch.c(138,74):remark #34051: REGISTER ALLOCATION : [_Z16add_matrix_batchP5batchS0_S0_] matrix_batch.c:138

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      47
            Global    :      26
            Local     :      21
        Regenerable   :       1
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      11 [8.44e+01 ~ 5.0%]
            Writes    :      10 [3.78e+01 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: transpose_matrix_batch(batch *, batch *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (transpose_matrix_batch(batch *, batch *)) [6] matrix_batch.c(161,63)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix_batch.c(174,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at matrix_batch.c(175,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at matrix_batch.c(176,7)
         remark #25401: memcopy(with guard) generated
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at matrix_batch.c(176,7)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at matrix_batch.c(176,7)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix_batch.c(176,7):remark #34026: call to memcpy implemented as a call to optimized library version
matrix_batch.c(161,63):remark #34051: REGISTER ALLOCATION : [_Z22transpose_matrix_batchP5batchS0_] matrix_batch.c:161

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      55
            Global    :      26
            Local     :      29
        Regenerable   :       2
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      96 bytes*
            Reads     :      20 [3.11e+01 ~ 1.7%]
            Writes    :      16 [1.96e+01 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: print_batch(batch *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_batch(batch *, int)) [7] matrix_batch.c(184,47)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at matrix_batch.c(188,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ matrix_batch.c(189,5) ]

   LOOP BEGIN at matrix_batch.c(189,5)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix_batch.c(184,47):remark #34051: REGISTER ALLOCATION : [_Z11print_batchP5batchi] matrix_batch.c:184

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      26
            Global    :      14
            Local     :      12
        Regenerable   :       6
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.60e+00 ~ 0.9%]
            Writes    :       4 [3.60e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: copy_mat_batch(batch *, batch *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (copy_mat_batch(batch *, batch *)) [8] matrix_batch.c(198,55)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix_batch.c(210,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at matrix_batch.c(211,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at matrix_batch.c(212,7)
         remark #25401: memcopy(with guard) generated
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at matrix_batch.c(212,7)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at matrix_batch.c(212,7)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix_batch.c(212,7):remark #34026: call to memcpy implemented as a call to optimized library version
matrix_batch.c(198,55):remark #34051: REGISTER ALLOCATION : [_Z14copy_mat_batchP5batchS0_] matrix_batch.c:198

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      53
            Global    :      26
            Local     :      27
        Regenerable   :       2
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      18 [2.66e+01 ~ 1.5%]
            Writes    :      17 [1.51e+01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set_identity_batch(batch *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set_identity_batch(batch *)) [9] matrix_batch.c(220,42)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix_batch.c(228,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matrix_batch.c(229,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at matrix_batch.c(230,7)
      <Peeled loop for vectorization, Predicate Optimized v1>
      LOOP END

      LOOP BEGIN at matrix_batch.c(230,7)
      <Predicate Optimized v1>
         remark #25422: Invariant Condition at line 231 hoisted out of this loop
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at matrix_batch.c(230,7)
      <Remainder loop for vectorization, Predicate Optimized v1>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at matrix_batch.c(230,7)
      <Remainder loop for vectorization, Predicate Optimized v1>
      LOOP END

      LOOP BEGIN at matrix_batch.c(230,7)
      <Peeled loop for vectorization, Predicate Optimized v2>
      LOOP END

      LOOP BEGIN at matrix_batch.c(230,7)
      <Predicate Optimized v2>
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at matrix_batch.c(230,7)
      <Remainder loop for vectorization, Predicate Optimized v2>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at matrix_batch.c(230,7)
      <Remainder loop for vectorization, Predicate Optimized v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix_batch.c(220,42):remark #34051: REGISTER ALLOCATION : [_Z18set_identity_batchP5batch] matrix_batch.c:220

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      72
            Global    :      45
            Local     :      27
        Regenerable   :       4
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       6 [9.00e+00 ~ 0.1%]
            Writes    :       6 [9.00e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: set_zero_batch(batch *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (set_zero_batch(batch *)) [10] matrix_batch.c(242,38)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matrix_batch.c(250,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matrix_batch.c(251,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at matrix_batch.c(252,7)
         remark #25408: memset generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at matrix_batch.c(252,7)
            remark #15300: LOOP WAS VECTORIZED
            remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
         LOOP END

         LOOP BEGIN at matrix_batch.c(252,7)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix_batch.c(252,7):remark #34026: call to memset implemented as a call to optimized library version
matrix_batch.c(242,38):remark #34051: REGISTER ALLOCATION : [_Z14set_zero_batchP5batch] matrix_batch.c:242

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      32
            Global    :      22
            Local     :      10
        Regenerable   :       3
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      14 [4.75e+01 ~ 2.1%]
            Writes    :      11 [2.34e+01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init_batch(batch *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (init_batch(batch *, int, int, int)) [11] matrix_batch.c(22,68)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at matrix_batch.c(29,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ matrix_batch.c(31,5) ]

   LOOP BEGIN at matrix_batch.c(31,5)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

matrix_batch.c(22,68):remark #34051: REGISTER ALLOCATION : [_Z10init_batchP5batchiii] matrix_batch.c:22

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 r13-r15]
        
    Routine temporaries
        Total         :      37
            Global    :      20
            Local     :      17
        Regenerable   :       1
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.80e+00 ~ 0.5%]
            Writes    :       2 [1.80e+00 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
