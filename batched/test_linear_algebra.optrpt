Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] test_linear_algebra.c(33,33)
  -> INLINE: (53,3) test_multiply_large()
  -> INLINE: (56,3) test_multiply_batch()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at test_linear_algebra.c(368,3) inlined into test_linear_algebra.c(53,3)
   remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ test_linear_algebra.c(369,21) ]
LOOP END

LOOP BEGIN at test_linear_algebra.c(374,3) inlined into test_linear_algebra.c(53,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at test_linear_algebra.c(375,5) inlined into test_linear_algebra.c(53,3)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END
LOOP END

LOOP BEGIN at test_linear_algebra.c(391,3) inlined into test_linear_algebra.c(53,3)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ test_linear_algebra.c(392,5) ]
LOOP END

LOOP BEGIN at test_linear_algebra.c(325,3) inlined into test_linear_algebra.c(56,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at test_linear_algebra.c(326,5) inlined into test_linear_algebra.c(56,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at test_linear_algebra.c(327,7) inlined into test_linear_algebra.c(56,3)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between A.mats[i][j][l] (328:9) and C.mats[i][j][l] (330:9)
         remark #25438: unrolled without remainder by 2  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at test_linear_algebra.c(342,3) inlined into test_linear_algebra.c(56,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at test_linear_algebra.c(343,5) inlined into test_linear_algebra.c(56,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at test_linear_algebra.c(344,7) inlined into test_linear_algebra.c(56,3)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at test_linear_algebra.c(384,3) inlined into test_linear_algebra.c(53,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

test_linear_algebra.c(33,33):remark #34051: REGISTER ALLOCATION : [main] test_linear_algebra.c:33

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     156
            Global    :      58
            Local     :      98
        Regenerable   :      82
        Spilled       :       8
        
    Routine stack
        Variables     :      92 bytes*
            Reads     :       6 [0.00e+00 ~ 0.0%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [6.10e+00 ~ 0.2%]
            Writes    :       3 [4.00e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test_add_batch()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test_add_batch()) [2] test_linear_algebra.c(68,23)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at test_linear_algebra.c(85,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 5  

   LOOP BEGIN at test_linear_algebra.c(86,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at test_linear_algebra.c(87,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between A.mats[i][j][l] (88:9) and C.mats[i][j][l] (90:9)
         remark #25436: completely unrolled by 3  
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(87,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(86,5)

      LOOP BEGIN at test_linear_algebra.c(87,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(87,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(86,5)

      LOOP BEGIN at test_linear_algebra.c(87,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(87,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(86,5)

      LOOP BEGIN at test_linear_algebra.c(87,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(87,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(86,5)

      LOOP BEGIN at test_linear_algebra.c(87,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(87,7)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at test_linear_algebra.c(95,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at test_linear_algebra.c(101,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

test_linear_algebra.c(68,23):remark #34051: REGISTER ALLOCATION : [_Z14test_add_batchv] test_linear_algebra.c:68

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r12 zmm0]
        
    Routine temporaries
        Total         :      85
            Global    :      12
            Local     :      73
        Regenerable   :      27
        Spilled       :       1
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [2.70e+00 ~ 1.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test_transpose_batch()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test_transpose_batch()) [3] test_linear_algebra.c(111,29)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at test_linear_algebra.c(126,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 4  

   LOOP BEGIN at test_linear_algebra.c(127,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at test_linear_algebra.c(128,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between A.mats[i][j][l] (129:9) and C.mats[j][i][l] (130:9)
         remark #25436: completely unrolled by 3  
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(128,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(127,5)

      LOOP BEGIN at test_linear_algebra.c(128,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(128,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(127,5)

      LOOP BEGIN at test_linear_algebra.c(128,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(128,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(127,5)

      LOOP BEGIN at test_linear_algebra.c(128,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(128,7)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at test_linear_algebra.c(135,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at test_linear_algebra.c(141,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

test_linear_algebra.c(111,29):remark #34051: REGISTER ALLOCATION : [_Z20test_transpose_batchv] test_linear_algebra.c:111

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r13 zmm0-zmm2]
        
    Routine temporaries
        Total         :      60
            Global    :      11
            Local     :      49
        Regenerable   :      26
        Spilled       :       2
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       2 [1.80e+00 ~ 1.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.6%]
            Writes    :       1 [9.00e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test_mult_by_scalar_batch()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test_mult_by_scalar_batch()) [4] test_linear_algebra.c(151,34)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at test_linear_algebra.c(162,3)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at test_linear_algebra.c(169,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 2  

   LOOP BEGIN at test_linear_algebra.c(170,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at test_linear_algebra.c(171,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between A.mats[i][j][l] (172:9) and C.mats[i][j][l] (173:9)
         remark #25436: completely unrolled by 3  
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(171,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(170,5)

      LOOP BEGIN at test_linear_algebra.c(171,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(171,7)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at test_linear_algebra.c(178,3)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ test_linear_algebra.c(179,5) ]
LOOP END

LOOP BEGIN at test_linear_algebra.c(184,3)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ test_linear_algebra.c(185,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

test_linear_algebra.c(151,34):remark #34051: REGISTER ALLOCATION : [_Z25test_mult_by_scalar_batchv] test_linear_algebra.c:151

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r12 r15 zmm0 k1]
        
    Routine temporaries
        Total         :      64
            Global    :      13
            Local     :      51
        Regenerable   :      29
        Spilled       :       2
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       3 [1.94e+00 ~ 1.1%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test_zero_and_id_batch()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test_zero_and_id_batch()) [5] test_linear_algebra.c(193,31)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at test_linear_algebra.c(212,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at test_linear_algebra.c(215,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

test_linear_algebra.c(193,31):remark #34051: REGISTER ALLOCATION : [_Z22test_zero_and_id_batchv] test_linear_algebra.c:193

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r12-r13]
        
    Routine temporaries
        Total         :      29
            Global    :      11
            Local     :      18
        Regenerable   :      19
        Spilled       :       2
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [9.00e-01 ~ 0.8%]
            Writes    :       1 [8.47e-01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test_inverse_batch()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test_inverse_batch()) [6] test_linear_algebra.c(224,27)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at test_linear_algebra.c(239,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 2  

   LOOP BEGIN at test_linear_algebra.c(240,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at test_linear_algebra.c(241,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between A.mats[i][j][l] (242:9) and C.mats[i][j][l] (243:9)
         remark #25436: completely unrolled by 3  
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(241,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(240,5)

      LOOP BEGIN at test_linear_algebra.c(241,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(241,7)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at test_linear_algebra.c(248,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at test_linear_algebra.c(254,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

test_linear_algebra.c(224,27):remark #34051: REGISTER ALLOCATION : [_Z18test_inverse_batchv] test_linear_algebra.c:224

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r13]
        
    Routine temporaries
        Total         :      47
            Global    :      11
            Local     :      36
        Regenerable   :      23
        Spilled       :       2
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       2 [1.80e+00 ~ 1.2%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.7%]
            Writes    :       1 [9.00e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test_multiply_small_batch()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test_multiply_small_batch()) [7] test_linear_algebra.c(263,34)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at test_linear_algebra.c(280,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 5  

   LOOP BEGIN at test_linear_algebra.c(281,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
      remark #25436: completely unrolled by 2  

      LOOP BEGIN at test_linear_algebra.c(282,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between A.mats[i][j][l] (283:9) and C.mats[i][j][l] (285:9)
         remark #25436: completely unrolled by 3  
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(282,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(281,5)

      LOOP BEGIN at test_linear_algebra.c(282,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(282,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(281,5)

      LOOP BEGIN at test_linear_algebra.c(282,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(282,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(281,5)

      LOOP BEGIN at test_linear_algebra.c(282,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(282,7)
      LOOP END
   LOOP END

   LOOP BEGIN at test_linear_algebra.c(281,5)

      LOOP BEGIN at test_linear_algebra.c(282,7)
      LOOP END

      LOOP BEGIN at test_linear_algebra.c(282,7)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at test_linear_algebra.c(290,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at test_linear_algebra.c(296,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

test_linear_algebra.c(263,34):remark #34051: REGISTER ALLOCATION : [_Z25test_multiply_small_batchv] test_linear_algebra.c:263

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r12 zmm0]
        
    Routine temporaries
        Total         :      85
            Global    :      12
            Local     :      73
        Regenerable   :      27
        Spilled       :       1
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       3 [2.70e+00 ~ 1.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test_multiply_batch()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test_multiply_batch()) [8] test_linear_algebra.c(307,28)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at test_linear_algebra.c(325,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at test_linear_algebra.c(326,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at test_linear_algebra.c(327,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between A.mats[i][j][l] (328:9) and C.mats[i][j][l] (330:9)
         remark #25438: unrolled without remainder by 2  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at test_linear_algebra.c(342,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at test_linear_algebra.c(343,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at test_linear_algebra.c(344,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

test_linear_algebra.c(307,28):remark #34051: REGISTER ALLOCATION : [_Z19test_multiply_batchv] test_linear_algebra.c:307

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      72
            Global    :      34
            Local     :      38
        Regenerable   :      40
        Spilled       :       8
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :      13 [1.61e+01 ~ 0.7%]
            Writes    :      13 [3.00e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test_multiply_large()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test_multiply_large()) [9] test_linear_algebra.c(356,28)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at test_linear_algebra.c(368,3)
   remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ test_linear_algebra.c(369,21) ]
LOOP END

LOOP BEGIN at test_linear_algebra.c(374,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at test_linear_algebra.c(375,5)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END
LOOP END

LOOP BEGIN at test_linear_algebra.c(391,3)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ test_linear_algebra.c(392,5) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at test_linear_algebra.c(384,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

test_linear_algebra.c(356,28):remark #34051: REGISTER ALLOCATION : [_Z19test_multiply_largev] test_linear_algebra.c:356

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r9 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      68
            Global    :      28
            Local     :      40
        Regenerable   :      22
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.3%]
            Writes    :       1 [1.00e+00 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
