/*@ begin PerfTuning (

def build {
arg build_command = 'gcc';
}

def performance_counter {
arg repetitions = 50;
}def performance_params {
param U_j0[] = range(1,6);
param U_k0[] = range(1,6);
param U_l0[] = range(1,6);
param RT_j0 = range[1,2,6];
param RT_k0 = range[1,2,6];
param RT_l0 = range[1,2,6];
param CFLAGS[] = ['-O1', '-O2', '-O3'];
param VEC[] = [False, True];
constraint unroll_limit_0 = ((U_j0 == 1) or (U_k0 == 1) or (U_l0 == 1));
constraint reg_capacity0 = (RT_j0 == 1)*RT_k0 == 1)*RT_l0 == 1) <= 150);
}

def input_params {
let N = [6];
param P_nrows[] = N;
param P_ncols[] = N;
param t45_nrows[] = N;
param t45_ncols[] = N;
}

def input_vars {
decl dynamic double P[P_nrows*P_ncols] = random;
decl dynamic double t45[t45_nrows*t45_ncols] = random;
}

def search {
arg algorithm = 'Randomsearch';
arg total_runs  = 10000;
}

) @*/


/*@ begin Loop (

transform Composite(
unrolljam = (['j','k','l'],[U_j0,U_k0,U_l0]),
regtile = (['j','k','l'],[RT_j0,RT_k0,RT_l0]),
vector = (VEC, ['ivdep','vector always'])
)

 TODO put loop here 

) @*/ 

/*@ end @*/
/*@ end @*/

